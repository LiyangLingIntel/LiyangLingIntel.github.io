I"0È<blockquote>
  <p>This is the collectection of my answers on leetcode.</p>

  <p>One of my purposes is to share my ideas, and another is to remind me to keep going.</p>
</blockquote>

<h3 id="1-two-sum">1. Two Sum</h3>

<p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>

<p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p>

<p><strong>Example:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
        <span class="s">"""
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """</span>
        <span class="n">ret_indices</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">num_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="n">num_dict</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">[</span><span class="n">num_dict</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]],</span> <span class="n">i</span><span class="p">]</span>
            <span class="n">num_dict</span><span class="p">[</span><span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="2-add-two-numbers">2. Add Two Numbers</h3>

<p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>

<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p>

<p><strong>Example:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
Output: 7 -&gt; 0 -&gt; 8
Explanation: 342 + 465 = 807.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="c1"># Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
</span>
<span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">addTwoNumbers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span><span class="p">):</span>
        <span class="s">"""
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """</span>
        <span class="n">carry</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">root</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">while</span> <span class="n">l1</span> <span class="ow">or</span> <span class="n">l2</span> <span class="ow">or</span> <span class="n">carry</span><span class="p">:</span>
            <span class="n">n1</span> <span class="o">=</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">l1</span><span class="p">:</span>
                <span class="n">n1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="n">val</span>
                <span class="n">l1</span> <span class="o">=</span> <span class="n">l1</span><span class="o">.</span><span class="nb">next</span>
            <span class="k">if</span> <span class="n">l2</span><span class="p">:</span>
                <span class="n">n2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="n">val</span>
                <span class="n">l2</span> <span class="o">=</span> <span class="n">l2</span><span class="o">.</span><span class="nb">next</span>
            <span class="n">carry</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="nb">divmod</span><span class="p">(</span><span class="n">n1</span><span class="o">+</span><span class="n">n2</span><span class="o">+</span><span class="n">carry</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
            <span class="n">p</span><span class="o">.</span><span class="nb">next</span> <span class="o">=</span> <span class="n">ListNode</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="nb">next</span>

        <span class="k">return</span> <span class="n">root</span><span class="o">.</span><span class="nb">next</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3-longest-substring-without-repeating-characters">3. Longest Substring Without Repeating Characters</h3>

<p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 3:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">lengthOfLongestSubstring</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: int
        """</span>
        
        <span class="n">s_dic</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">length</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">start</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">s_dic</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">start</span><span class="p">:</span>
                <span class="n">start</span> <span class="o">=</span> <span class="n">s_dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
            <span class="n">s_dic</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="n">i</span>
            <span class="n">length</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">i</span><span class="o">-</span><span class="n">start</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">length</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="4-median-of-two-sorted-arrays">4. Median of Two Sorted Arrays</h3>

<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p>

<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>

<p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>nums1 = [1, 3]
nums2 = [2]

The median is 2.0
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">findMedianSortedArrays</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">):</span>
        <span class="s">"""
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """</span>
        <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums1</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">l1</span> <span class="o">&gt;</span> <span class="n">l2</span><span class="p">:</span>
            <span class="n">nums1</span><span class="p">,</span> <span class="n">nums2</span><span class="p">,</span> <span class="n">l1</span><span class="p">,</span> <span class="n">l2</span> <span class="o">=</span> <span class="n">nums2</span><span class="p">,</span> <span class="n">nums1</span><span class="p">,</span> <span class="n">l2</span><span class="p">,</span> <span class="n">l1</span>

        <span class="n">i_max</span><span class="p">,</span> <span class="n">i_min</span><span class="p">,</span> <span class="n">half_len</span> <span class="o">=</span> <span class="n">l1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">l1</span><span class="o">+</span><span class="n">l2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span>
        <span class="k">while</span> <span class="n">i_max</span> <span class="o">&gt;=</span> <span class="n">i_min</span><span class="p">:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="p">(</span><span class="n">i_min</span> <span class="o">+</span> <span class="n">i_max</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">half_len</span> <span class="o">-</span> <span class="n">i</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l1</span> <span class="ow">and</span> <span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                <span class="n">i_min</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                <span class="n">i_max</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">left_max</span> <span class="o">=</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">elif</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">left_max</span> <span class="o">=</span> <span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">left_max</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">l1</span> <span class="o">+</span> <span class="n">l2</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">left_max</span>

                <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="n">l1</span><span class="p">:</span>
                    <span class="n">right_min</span> <span class="o">=</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="k">elif</span> <span class="n">j</span> <span class="o">==</span> <span class="n">l2</span><span class="p">:</span>
                    <span class="n">right_min</span> <span class="o">=</span> <span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">right_min</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">nums1</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums2</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">left_max</span> <span class="o">+</span> <span class="n">right_min</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="5-longest-palindromic-substring">5. Longest Palindromic Substring</h3>

<p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: "cbbd"
Output: "bb"
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">get_palindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
        <span class="s">"""
        left &amp; right are indexs of potential palindrome string
        """</span>
        <span class="k">while</span> <span class="n">left</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">right</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="ow">and</span> <span class="n">s</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">==</span> <span class="n">s</span><span class="p">[</span><span class="n">right</span><span class="p">]:</span>
            <span class="n">left</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="n">right</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">[</span><span class="n">left</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:</span> <span class="n">right</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">longestPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: str
        """</span>
        <span class="n">pld</span> <span class="o">=</span> <span class="s">''</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="c1"># length is odd
</span>            <span class="n">potent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_palindrome</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
            <span class="n">pld</span> <span class="o">=</span> <span class="n">potent</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">potent</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">pld</span><span class="p">)</span> <span class="k">else</span> <span class="n">pld</span>
            <span class="c1"># length is even
</span>            <span class="n">potent</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_palindrome</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">pld</span> <span class="o">=</span> <span class="n">potent</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">potent</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">pld</span><span class="p">)</span> <span class="k">else</span> <span class="n">pld</span>

        <span class="k">return</span> <span class="n">pld</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="6-zigzag-conversion">6. ZigZag Conversion</h3>

<p>The string <code class="highlighter-rouge">"PAYPALISHIRING"</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>P   A   H   N
A P L S I I G
Y   I   R
</pre></td></tr></tbody></table></code></pre></div></div>

<p>And then read line by line: <code class="highlighter-rouge">"PAHNAPLSIIGYIR"</code></p>

<p>Write the code that will take a string and make this conversion given a number of rows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre>string convert(string s, int numRows);
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:

P     I    N
A   L S  I G
Y A   H R
P     I
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">numRows</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :type numRows: int
        :rtype: str
        """</span>
        <span class="n">li</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numRows</span><span class="p">)]</span>
        <span class="n">turn_num</span> <span class="o">=</span> <span class="n">numRows</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="n">mod</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">numRows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">turn_num</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)):</span>
            <span class="c1"># for j in range(numRows):
</span>            <span class="n">num</span> <span class="o">=</span> <span class="n">i</span> <span class="o">%</span> <span class="n">mod</span>
            <span class="k">if</span> <span class="n">num</span> <span class="o">&lt;=</span> <span class="n">turn_num</span><span class="p">:</span>
                <span class="n">li</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">li</span><span class="p">[</span><span class="n">mod</span> <span class="o">-</span> <span class="n">num</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

        <span class="n">output</span> <span class="o">=</span> <span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">li</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">output</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="7-reverse-integer">7. Reverse Integer</h3>

<p>Given a 32-bit signed integer, reverse digits of an integer.</p>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: 123
Output: 321
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: -123
Output: -321
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 3:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: 120
Output: 21
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>

    <span class="c1"># Note: 32-bit signed integer
</span>    <span class="k">def</span> <span class="nf">reverse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type x: int
        :rtype: int
        """</span>
        <span class="n">sign</span> <span class="o">=</span> <span class="s">'-'</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="s">''</span>
        <span class="n">res</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sign</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="p">))[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">res</span> <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">**</span><span class="mi">31</span> <span class="k">else</span> <span class="mi">0</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="9-palindrome-number">9. Palindrome Number</h3>

<p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: 121
Output: true
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">isPalindrome</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="s">"""
        :type x: int
        :rtype: bool
        """</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
        <span class="n">l</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">x</span><span class="p">[</span><span class="n">l</span> <span class="o">-</span> <span class="n">i</span><span class="p">]:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="12-integer-to-roman">12. Integer to Roman</h3>

<p>Roman numerals are represented by seven different symbols: <code class="highlighter-rouge">I</code>, <code class="highlighter-rouge">V</code>, <code class="highlighter-rouge">X</code>, <code class="highlighter-rouge">L</code>, <code class="highlighter-rouge">C</code>, <code class="highlighter-rouge">D</code> and <code class="highlighter-rouge">M</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For example, two is written as <code class="highlighter-rouge">II</code> in Roman numeral, just two oneâs added together. Twelve is written as, <code class="highlighter-rouge">XII</code>, which is simply <code class="highlighter-rouge">X</code> + <code class="highlighter-rouge">II</code>. The number twenty seven is written as <code class="highlighter-rouge">XXVII</code>, which is <code class="highlighter-rouge">XX</code> + <code class="highlighter-rouge">V</code> + <code class="highlighter-rouge">II</code>.</p>

<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code class="highlighter-rouge">IIII</code>. Instead, the number four is written as <code class="highlighter-rouge">IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code class="highlighter-rouge">IX</code>. There are six instances where subtraction is used:</p>

<ul>
  <li><code class="highlighter-rouge">I</code> can be placed before <code class="highlighter-rouge">V</code> (5) and <code class="highlighter-rouge">X</code> (10) to make 4 and 9.</li>
  <li><code class="highlighter-rouge">X</code> can be placed before <code class="highlighter-rouge">L</code> (50) and <code class="highlighter-rouge">C</code> (100) to make 40 and 90.</li>
  <li><code class="highlighter-rouge">C</code> can be placed before <code class="highlighter-rouge">D</code> (500) and <code class="highlighter-rouge">M</code> (1000) to make 400 and 900.</li>
</ul>

<p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: 3
Output: "III"
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: 4
Output: "IV"
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 3:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: 9
Output: "IX"
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 4:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 5:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">intToRoman</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="s">"""
        :type num: int
        :rtype: str
        """</span>
        <span class="n">num2roman</span> <span class="o">=</span> <span class="p">{</span>
            <span class="mi">0</span><span class="p">:</span> <span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="s">"I"</span><span class="p">,</span> <span class="s">"II"</span><span class="p">,</span> <span class="s">"III"</span><span class="p">,</span> <span class="s">"IV"</span><span class="p">,</span> <span class="s">"V"</span><span class="p">,</span> <span class="s">"VI"</span><span class="p">,</span> <span class="s">"VII"</span><span class="p">,</span> <span class="s">"VIII"</span><span class="p">,</span> <span class="s">"IX"</span><span class="p">),</span>
            <span class="mi">1</span><span class="p">:</span> <span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="s">"X"</span><span class="p">,</span> <span class="s">"XX"</span><span class="p">,</span> <span class="s">"XXX"</span><span class="p">,</span> <span class="s">"XL"</span><span class="p">,</span> <span class="s">"L"</span><span class="p">,</span> <span class="s">"LX"</span><span class="p">,</span> <span class="s">"LXX"</span><span class="p">,</span> <span class="s">"LXXX"</span><span class="p">,</span> <span class="s">"XC"</span><span class="p">),</span> 
            <span class="mi">2</span><span class="p">:</span> <span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="s">"C"</span><span class="p">,</span> <span class="s">"CC"</span><span class="p">,</span> <span class="s">"CCC"</span><span class="p">,</span> <span class="s">"CD"</span><span class="p">,</span> <span class="s">"D"</span><span class="p">,</span> <span class="s">"DC"</span><span class="p">,</span> <span class="s">"DCC"</span><span class="p">,</span> <span class="s">"DCCC"</span><span class="p">,</span> <span class="s">"CM"</span><span class="p">),</span>
            <span class="mi">3</span><span class="p">:</span> <span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="s">"M"</span><span class="p">,</span> <span class="s">"MM"</span><span class="p">,</span> <span class="s">"MMM"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="n">roman</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">num2roman</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="n">num</span> <span class="o">//</span> <span class="mi">1000</span> <span class="o">%</span> <span class="mi">10</span><span class="p">],</span>
            <span class="n">num2roman</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="n">num</span> <span class="o">//</span> <span class="mi">100</span> <span class="o">%</span> <span class="mi">10</span><span class="p">],</span>
            <span class="n">num2roman</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">num</span> <span class="o">//</span> <span class="mi">10</span> <span class="o">%</span> <span class="mi">10</span><span class="p">],</span>
            <span class="n">num2roman</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">num</span> <span class="o">%</span> <span class="mi">10</span><span class="p">]</span>
        <span class="p">]</span>

        <span class="k">return</span> <span class="s">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">roman</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="13-roman-to-integer">13. Roman to Integer</h3>

<p>Roman numerals are represented by seven different symbols: <code class="highlighter-rouge">I</code>, <code class="highlighter-rouge">V</code>, <code class="highlighter-rouge">X</code>, <code class="highlighter-rouge">L</code>, <code class="highlighter-rouge">C</code>, <code class="highlighter-rouge">D</code> and <code class="highlighter-rouge">M</code>.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre>Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
</pre></td></tr></tbody></table></code></pre></div></div>

<p>For example, two is written as <code class="highlighter-rouge">II</code> in Roman numeral, just two oneâs added together. Twelve is written as, <code class="highlighter-rouge">XII</code>, which is simply <code class="highlighter-rouge">X</code> + <code class="highlighter-rouge">II</code>. The number twenty seven is written as <code class="highlighter-rouge">XXVII</code>, which is <code class="highlighter-rouge">XX</code> + <code class="highlighter-rouge">V</code> + <code class="highlighter-rouge">II</code>.</p>

<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code class="highlighter-rouge">IIII</code>. Instead, the number four is written as <code class="highlighter-rouge">IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code class="highlighter-rouge">IX</code>. There are six instances where subtraction is used:</p>

<ul>
  <li><code class="highlighter-rouge">I</code> can be placed before <code class="highlighter-rouge">V</code> (5) and <code class="highlighter-rouge">X</code> (10) to make 4 and 9.</li>
  <li><code class="highlighter-rouge">X</code> can be placed before <code class="highlighter-rouge">L</code> (50) and <code class="highlighter-rouge">C</code> (100) to make 40 and 90.</li>
  <li><code class="highlighter-rouge">C</code> can be placed before <code class="highlighter-rouge">D</code> (500) and <code class="highlighter-rouge">M</code> (1000) to make 400 and 900.</li>
</ul>

<p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p>

<p><strong>Example 1:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: "III"
Output: 3
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 2:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: "IV"
Output: 4
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 3:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>Input: "IX"
Output: 9
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 4:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>Example 5:</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>Input: "MCMXCIV"
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>My code:</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">romanToInt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
        <span class="s">"""
        :type s: str
        :rtype: int
        """</span>
        <span class="n">roman2num</span> <span class="o">=</span> <span class="p">{</span><span class="s">'I'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">'V'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">'X'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">'L'</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="s">'C'</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="s">'D'</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span> <span class="s">'M'</span><span class="p">:</span> <span class="mi">1000</span><span class="p">}</span>
        
        <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">roman2num</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">&lt;</span> <span class="n">roman2num</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]]:</span>
                <span class="n">num</span> <span class="o">-=</span> <span class="n">roman2num</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">num</span> <span class="o">+=</span> <span class="n">roman2num</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="n">roman2num</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span>

        <span class="k">return</span> <span class="n">num</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET