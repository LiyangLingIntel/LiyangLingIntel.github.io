I"×<p>When I started to use python regex, the most commonly used are <code class="highlighter-rouge">.</code> <code class="highlighter-rouge">*</code> <code class="highlighter-rouge">?</code> <code class="highlighter-rouge">()</code> <code class="highlighter-rouge">[]</code> <code class="highlighter-rouge">\d</code> <code class="highlighter-rouge">\s</code> and etc. However, I have sometimes met problems like I cannot partial match strings or control the groups as I needd.</p>

<p>So, here I found some techniques which would be helpful.</p>

<h3 id="expressions">Expressions</h3>

<ol>
  <li>
    <p><code class="highlighter-rouge">(?:A)</code></p>

    <p>Cancel the group function of <code class="highlighter-rouge">()</code>. That means the content matched <code class="highlighter-rouge">A </code>would not form a group.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">(?&lt;=B)A</code></p>

    <p>Positive lookbehind assertion. This matches the expression <code class="highlighter-rouge">A</code> only if <code class="highlighter-rouge">B</code> is immediately to its left. This can only matched fixed length expressions.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">A(?=B)</code></p>

    <p>Lookahead assertion. This matches the expression <code class="highlighter-rouge">A</code> only if it is followed by <code class="highlighter-rouge">B</code>.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">A(?!B)</code></p>

    <p>Negative lookahead assertion. This matches the expression <code class="highlighter-rouge">A</code> only if it is not followed by <code class="highlighter-rouge">B</code>.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">(...)\1</code></p>

    <p>The number <code class="highlighter-rouge">1</code> corresponds to the first group to be matched. If we want to match more instances of the same expresion, simply use its number instead of writing out the whole expression again. We can use from <code class="highlighter-rouge">1</code> up to <code class="highlighter-rouge">99</code> such groups and their corresponding numbers.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">(?aiLmsux)</code></p>

    <p>Here, <code class="highlighter-rouge">a</code>, <code class="highlighter-rouge">i</code>, <code class="highlighter-rouge">L</code>, <code class="highlighter-rouge">m</code>, <code class="highlighter-rouge">s</code>, <code class="highlighter-rouge">u</code>, and <code class="highlighter-rouge">x</code> are flags:</p>

    <ul>
      <li><code class="highlighter-rouge">a</code> â€” Matches ASCII only</li>
      <li><code class="highlighter-rouge">i</code> â€” Ignore case</li>
      <li><code class="highlighter-rouge">L</code> â€” Locale dependent</li>
      <li><code class="highlighter-rouge">m</code> â€” Multi-line</li>
      <li><code class="highlighter-rouge">s</code> â€” Matches all</li>
      <li><code class="highlighter-rouge">u</code> â€” Matches unicode</li>
      <li><code class="highlighter-rouge">x</code> â€” Verbose</li>
    </ul>
  </li>
  <li>
    <p><code class="highlighter-rouge">(? )</code></p>

    <p>Inside parentheses like this, <code class="highlighter-rouge">?</code> acts as an extension notation. Its meaning depends on the character immediately to its right.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">(?PAB)</code></p>

    <p>Matches the expression <code class="highlighter-rouge">AB</code>, and it can be accessed with the group name.</p>
  </li>
</ol>

<h3 id="functions">Functions</h3>

<ol>
  <li>
    <p><code class="highlighter-rouge">re.findall(A, B)</code></p>

    <p>Matches all instances of an expression <code class="highlighter-rouge">A</code> in a string <code class="highlighter-rouge">B</code> and returns them in a list.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">re.search(A, B)</code></p>

    <p>Matches the first instance of an expression <code class="highlighter-rouge">A</code> in a string <code class="highlighter-rouge">B</code>, and returns it as a re match object.</p>

    <p><code class="highlighter-rouge">re.match(A, B)</code></p>

    <p>Similar to  <code class="highlighter-rouge">re.search</code>, while <code class="highlighter-rouge">re.match</code> will stop and return <code class="highlighter-rouge">None</code>, if does not match pattern at the beginning of the string.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">re.split(A, B)</code></p>

    <p>Split a string B into a list using the delimiter <code class="highlighter-rouge">A</code>.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">re.sub(A, B, C)</code></p>

    <p>Replace <code class="highlighter-rouge">A</code> with <code class="highlighter-rouge">B</code> in the string <code class="highlighter-rouge">C</code>.</p>

    <p><code class="highlighter-rouge">re.subn(A, B, C, D)</code></p>

    <p>Same as <code class="highlighter-rouge">re.sub</code>, while <code class="highlighter-rouge">D</code> means the relace times, if not specified, it will replace all matched patterns.</p>
  </li>
</ol>
:ET