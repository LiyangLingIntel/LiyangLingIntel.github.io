I"ø<blockquote>
  <p>Nowadays, Iâ€™m dealing with a NLP project, there is a step which is about python regular expression and I have a problem.</p>

  <p>When program meets texts with some formats that my regular expression cannot match well, it will take really long time to finish or even get endless loop. So I want to set a run time upper limit onto each loop. Python decorator could solve this well.</p>
</blockquote>

<h3 id="first-method">First method:</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">signal</span>

<span class="k">def</span> <span class="nf">set_timeout</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">callback</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">signum</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
            <span class="s">"""
            callback function, 
            :signum: number of signalï¼Œ
            :frame: the interrupted stack frame.
            """</span>
            <span class="k">raise</span> <span class="nb">RuntimeError</span>

        <span class="k">def</span> <span class="nf">to_do</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">handle</span><span class="p">)</span>  <span class="c1"># set signal and callback func
</span>                <span class="n">signal</span><span class="o">.</span><span class="n">alarm</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>  <span class="c1"># set alarm for num second
</span>                <span class="k">print</span><span class="p">(</span><span class="s">'start alarm signal.'</span><span class="p">)</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
                <span class="k">print</span><span class="p">(</span><span class="s">'close alarm signal.'</span><span class="p">)</span>
                <span class="n">signal</span><span class="o">.</span><span class="n">alarm</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># close alarm
</span>                <span class="k">return</span> <span class="n">r</span>
            <span class="k">except</span> <span class="nb">RuntimeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">callback</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">to_do</span>
    <span class="k">return</span> <span class="n">wrap</span>

<span class="o">@</span><span class="n">set_timeout</span><span class="p">(</span><span class="n">num_sec</span><span class="p">,</span> <span class="n">callback_func</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">target_func</span><span class="p">():</span>
    <span class="k">pass</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Codeâ€™s fromï¼šhttps://blog.csdn.net/DylanYuan/article/details/83583981</p>

<h3 id="second-method">Second method:</h3>

<p>The second way is not as powerful as the first one, but itâ€™s much simpler.</p>

<p>Itâ€™s needed to use <code class="highlighter-rouge">pip</code> to add package <code class="highlighter-rouge">timeout_decorator</code> to out python environment first.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">timeout_decorator</span> <span class="kn">import</span> <span class="n">timeout</span>

<span class="o">@</span><span class="n">timeout</span><span class="p">(</span><span class="n">num_sec</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">target_func</span><span class="p">():</span>
    <span class="k">pass</span>
</pre></td></tr></tbody></table></code></pre></div></div>

:ET